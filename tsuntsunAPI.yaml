swagger: "2.0"
info:
  description: "技育展プロジェクトのAPI"
  version: "1.0.0"
  title: "TSUNTSUN API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "tsundoku"
  description: "積読関連"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "tag"
  description: "タグ関連"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /tsundoku:
    get:
      tags:
      - "tsundoku"
      summary: "積読を全表示"
      description: "Returns all tsundokus"
      operationId: "getTsundokus"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Tsundoku"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Tag not found"
      security:
      - api_key: []
    post:
      tags:
      - "tsundoku"
      summary: "積読追加"
      description: ""
      operationId: "addTsundoku"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Tsundoku object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Tsundoku"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "tsundoku"
      summary: "存在している積読を更新"
      description: ""
      operationId: "updateTsundoku"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Tsundoku object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Tsundoku"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Tsundoku not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /tsundoku/findByCategories:
    get:
      tags:
      - "tsundoku"
      summary: "カテゴリから積読を取得"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findTsundokusByCategories"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "category"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "book"
          - "site"
          default: "book"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Tsundoku"
        "400":
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /tsundoku/findByTags:
    get:
      tags:
      - "tsundoku"
      summary: "タグから積読を取得"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findTsundokusByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Tsundoku"
        "400":
          description: "Invalid tag value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      # deprecated: true
  /tsundoku/{tsundokuId}:
    get:
      tags:
      - "tsundoku"
      summary: "IDから積読を検索"
      description: "Returns a single tsundoku"
      operationId: "getTsundokuById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tsundokuId"
        in: "path"
        description: "ID of tsundoku to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Tsundoku"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - api_key: []
    post:
      tags:
      - "tsundoku"
      summary: "フォームから積読情報を更新"
      description: ""
      operationId: "updateTsundokuWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tsundokuId"
        in: "path"
        description: "Id of the tsundoku"
        required: true
        type: "integer"
      - name: "name"
        in: "formData"
        description: "Updated name of the tsundoku"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the tsundoku"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "tsundoku"
      summary: "積読を削除"
      description: ""
      operationId: "deleteTsundoku"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "tsundokuId"
        in: "path"
        description: "Tsundoku id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Tsundoku not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  # /pet/{petId}/uploadImage:
  #   post:
  #     tags:
  #     - "pet"
  #     summary: "uploads an image"
  #     description: ""
  #     operationId: "uploadFile"
  #     consumes:
  #     - "multipart/form-data"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - name: "petId"
  #       in: "path"
  #       description: "ID of pet to update"
  #       required: true
  #       type: "integer"
  #       format: "int64"
  #     - name: "additionalMetadata"
  #       in: "formData"
  #       description: "Additional data to pass to server"
  #       required: false
  #       type: "string"
  #     - name: "file"
  #       in: "formData"
  #       description: "file to upload"
  #       required: false
  #       type: "file"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/ApiResponse"
  #     security:
  #     - petstore_auth:
  #       - "write:pets"
  #       - "read:pets"
  /tag:
    get:
      tags:
      - "tag"
      summary: "タグを全取得"
      description: "This can only be done by the logged in user."
      operationId: "getTags"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Tag"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Tag not found"
      security:
      - api_key: []
    post:
      tags:
      - "tag"
      summary: "タグ作成"
      description: "This can only be done by the logged in user."
      operationId: "createTag"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created tag object"
        required: true
        schema:
          $ref: "#/definitions/Tag"
      responses:
        default:
          description: "successful operation"
  /tag/{tagId}:
    get:
      tags:
      - "tag"
      summary: "IDからタグを検索"
      description: "Returns a single tsundoku"
      operationId: "getTagById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tagId"
        in: "path"
        description: "ID of tag to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Tag"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Tag not found"
      security:
      - api_key: []
    post:
      tags:
      - "tag"
      summary: "フォームからタグ情報を更新"
      description: ""
      operationId: "updateTagWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tagId"
        in: "path"
        description: "Id of the tag"
        required: true
        type: "integer"
      - name: "name"
        in: "formData"
        description: "Updated name of the tag"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the tag"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "tag"
      summary: "タグを削除"
      description: ""
      operationId: "deleteTag"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "tagId"
        in: "path"
        description: "Tag id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Tag not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /user:
    post:
      tags:
      - "user"
      summary: "ユーザー作成"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "ログイン"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "ログアウト"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "IDからユーザー情報を取得"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "IDからユーザー情報を更新"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "IDからユーザー情報を削除"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      token:
        type: "string"
      password:
        type: "string"
      createdAt:
        type: "string"
      updatedAt:
        type: "string"
      deletedAt:
        type: "string"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Tsundoku:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      # category:
      #   $ref: "#/definitions/Category"
      category:
        type: "string"
        description: "Tsundoku status in the store"
        enum:
        - "book"
        - "site"
      name:
        type: "string"
        example: "リーダブルコード"
      author:
        type: "string"
        example: "田中"
      url:
        type: "string"
        example: "https://"
      deadline:
        type: "string"
      reqiredTime:
        type: "string"
      createdAt:
        type: "string"
      # photoUrls:
      #   type: "array"
      #   xml:
      #     name: "photoUrl"
      #     wrapped: true
      #   items:
      #     type: "string"
      # tags:
      #   type: "array"
      #   xml:
      #     name: "tag"
      #     wrapped: true
      #   items:
      #     $ref: "#/definitions/Tag"
    xml:
      name: "Tsundoku"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"